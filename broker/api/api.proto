syntax = "proto3";

package api;
option go_package = "api";

message Message {
    //metadata
    bytes meta = 1;
    //message body
    map<string, string> body = 2;
}
//RegisterReq register an agent
message RegisterReq {
    int32   id = 1;
    string  servername = 2;
    map<string, string> meta = 3;
}
message RegisterResp {
    int32   id = 1;
    bool    accepted =2;
}

//UnRegisterReq unregister an agent
message UnRegisterReq {
    int32   id = 1;
}
//UnRegisterResp
message UnRegisterResp {
    string message = 1;
}
//HeartbeatReq heartbeat request
message HeartbeatReq {
    int32   id = 1;
}
//HeartbeatResp heartbeat response
message HeartbeatResp {
    int32   id = 1;
}

//HeartbeatResp commit request
message CommitReq {
    Message message = 1;
}
//CommitResp commit response
message CommitResp {
    bool success = 2;
}

service Broker {
    rpc register(RegisterReq) returns(RegisterResp);

    //Heartbeat
    //agent should be heartbeat with interval 30s~720s
    rpc heartbeat(HeartbeatReq) returns (HeartbeatResp) ;

    //UnRegister agent unregister from broker cluster
    rpc unregister(UnRegisterReq) returns (UnRegisterResp);


    //commit message into broker
    rpc commit(CommitReq) returns (CommitResp);
}
